// app/_layout.tsx
import { nanoid } from "nanoid/non-secure";
import { useCallback, useEffect, useRef, useState } from "react";
import { BackHandler, Linking, Platform, StyleSheet, View } from "react-native";
import {
  SafeAreaProvider,
  useSafeAreaInsets,
} from "react-native-safe-area-context";
import { WebView } from "react-native-webview";
import FirebaseNotificationHandler from "../hooks/firebaseNotificationHandler";

import { getQuizbellsAuth, setQuizbellsAuth } from "../utils/utils";

const BASE_WEBVIEW_URL =
  "https://google.github.io/webview-ads/test/#api-for-ads-tests";
// const BASE_WEBVIEW_URL = "https://quizbells.com";
// const BASE_WEBVIEW_URL = "http://192.168.219.101:3000";

const handleRegistrationError = (errorMessage: string) => {
  alert(errorMessage);
  throw new Error(errorMessage);
};

export default function App() {
  const webViewRef = useRef<WebView>(null);
  const insets = useSafeAreaInsets();
  const isPushInitializedRef = useRef(false);
  const [canGoBack, setCanGoBack] = useState(false);
  const [webviewUrl, setWebviewUrl] = useState(BASE_WEBVIEW_URL);
  const lastUrlRef = useRef<string | null>(null);

  // FirebaseNotificationHandler Ïù∏Ïä§ÌÑ¥Ïä§Î•º useRefÎ°ú Í¥ÄÎ¶¨
  const notificationHandlerRef = useRef<FirebaseNotificationHandler | null>(
    null
  );

  // 2. WebView Î°úÎìú ÏôÑÎ£å ÌõÑ localStorageÏóê Ï†ÄÏû•
  const handleWebViewLoad = async () => {
    const quizbellsAuth = await getQuizbellsAuth();

    if (quizbellsAuth && webViewRef.current) {
      const jsCode = `localStorage.setItem("quizbells-auth", '${JSON.stringify(
        quizbellsAuth
      )}'); true;`;
      webViewRef.current.injectJavaScript(jsCode);
    }
  };

  const handleMessage = (event: any) => {
    const message = event.nativeEvent.data;
    console.log("WebView Message: ", message);
  };

  // üîß ÏΩúÎ∞± Ìï®Ïàò Ï†ïÏùò
  const reloadWebView = useCallback(
    (link: string) => {
      console.log("Í∏∞Ï°¥ URL:", webviewUrl);
      console.log("ÏÉàÎ°úÏö¥ URL:", link);

      // 1. ÌòÑÏû¨ Î°úÎî© Ï§ëÎã®
      // if (webViewRef.current) {
      //   webViewRef.current.stopLoading();
      // }

      // 2. URL ÏÉÅÌÉú Î≥ÄÍ≤Ω
      setWebviewUrl(link);
    },
    [webviewUrl]
  );

  useEffect(() => {
    const initPush = async () => {
      console.log("isPushInitializedRef.current", isPushInitializedRef.current);
      if (isPushInitializedRef.current) {
        console.log("üö´ Ïù¥ÎØ∏ Ìë∏Ïãú Ï¥àÍ∏∞ÌôîÎê®");
        return;
      }

      console.log("üëâ Ìë∏Ïãú Ï¥àÍ∏∞Ìôî ÏãúÏûë");

      try {
        const handler = new FirebaseNotificationHandler(reloadWebView);
        notificationHandlerRef.current = handler;

        const result = await handler.requestUserPermission();
        console.log("Í∂åÌïú ÏöîÏ≤≠ Í≤∞Í≥º:", result);

        if (!result) return;

        const token = await handler.getFCMToken();
        console.log(`üì± Ìë∏Ïãú ÌÜ†ÌÅ∞: ${token}`);

        // Í∏∞Ï°¥ ÌÜ†ÌÅ∞Í≥º ÎπÑÍµê
        const stored = await getQuizbellsAuth();
        if (stored?.fcmToken === token) {
          console.log("‚úÖ Í∏∞Ï°¥ ÌÜ†ÌÅ∞ Ïú†ÏßÄ");
          return;
        }

        const quizbellsInfo = {
          userId: nanoid(12),
          joinType: Platform.OS,
          fcmToken: token,
        };

        const res = await fetch(`${BASE_WEBVIEW_URL}/api/token`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(quizbellsInfo),
        });

        if (!res.ok) console.warn("‚ùå ÏÑúÎ≤Ñ Îì±Î°ù Ïã§Ìå®:", res.status);
        else console.log("‚úÖ ÏÑúÎ≤Ñ Îì±Î°ù ÏôÑÎ£å");

        await setQuizbellsAuth(quizbellsInfo);
        console.log("üì¶ Î°úÏª¨ Ï†ÄÏû• ÏôÑÎ£å");

        // ÌÖåÏä§Ìä∏ ÏïåÎ¶º
        setTimeout(() => handler.showTestNotification(), 5000);
        // URL Ï†ÑÌôò
        isPushInitializedRef.current = true; // ‚úÖ Ïù¥ ÏãúÏ†êÏóêÎßå trueÎ°ú Î≥ÄÍ≤Ω
      } catch (e) {
        handleRegistrationError(`${e}`);
      } finally {
        // setWebviewUrl(`${BASE_WEBVIEW_URL}/quiz`);
        setWebviewUrl(`${BASE_WEBVIEW_URL}`);
      }
    };

    initPush();

    return () => {
      notificationHandlerRef.current?.cleanup();
      notificationHandlerRef.current = null;
      isPushInitializedRef.current = false; // ‚úÖ Ïù¥ ÏãúÏ†êÏóêÎßå trueÎ°ú Î≥ÄÍ≤Ω
    };
  }, []);

  // reloadWebView ÏΩúÎ∞±Ïù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ìï∏Îì§Îü¨ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (notificationHandlerRef.current) {
      notificationHandlerRef.current.setWebviewReloadCallback(reloadWebView);
    }
  }, [reloadWebView]);

  // ÏïàÎìúÎ°úÏù¥Îìú Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº Ï≤òÎ¶¨
  useEffect(() => {
    console.log("‚úÖ Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº Ï†úÏñ¥ Î°úÏßÅ Ï∂îÍ∞Ä");
    const backAction = () => {
      if (canGoBack && webViewRef.current) {
        webViewRef.current.goBack();
        return true;
      } else {
        BackHandler.exitApp();
        return true;
      }
    };

    const backHandler = BackHandler.addEventListener(
      "hardwareBackPress",
      backAction
    );

    return () => backHandler.remove();
  }, [canGoBack]);

  const handleNavigationStateChange = (navState: any) => {
    if (navState.url === lastUrlRef.current) return; // Ï§ëÎ≥µ Î∞©ÏßÄ

    lastUrlRef.current = navState.url;
    setCanGoBack(navState.canGoBack);
    console.log("navState", navState);

    // üí° Ï§ëÏöî: ÏõπÎ∑∞Ïùò Ïã§Ï†ú URLÍ≥º state ÎèôÍ∏∞Ìôî
    if (navState.url !== webviewUrl) {
      setWebviewUrl(navState.url);
    }

    if (navState.url.includes("apps.apple.com")) {
      Linking.openURL(navState.url); // Safari ÎòêÎäî Ïø†Ìå° Ïï±ÏúºÎ°ú
    }
  };

  const handleError = (syntheticEvent: any) => {
    const { nativeEvent } = syntheticEvent;
    console.log("WebView Ïò§Î•ò:", nativeEvent);

    // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Ïãú ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
    if (nativeEvent.code === -1005) {
      if (webViewRef.current) {
        webViewRef.current.reload();
      }
    }
  };

  useEffect(() => {
    console.log("webviewUrlÏù¥ Î≥ÄÍ≤ΩÎê®:", webviewUrl);
  }, [webviewUrl]);

  return (
    <SafeAreaProvider>
      <View style={styles.container}>
        <WebView
          ref={webViewRef}
          source={{ uri: webviewUrl }}
          style={{
            marginTop: insets.top,
            marginBottom: insets.bottom,
          }}
          allowsPictureInPictureMediaPlayback={false}
          thirdPartyCookiesEnabled={true}
          javaScriptEnabled={true}
          domStorageEnabled={true}
          startInLoadingState={true}
          scalesPageToFit={false}
          onLoadEnd={handleWebViewLoad}
          onNavigationStateChange={handleNavigationStateChange}
          // onShouldStartLoadWithRequest={handleShouldStartLoadWithRequest}
          onMessage={handleMessage}
          onError={handleError}
          injectedJavaScript={`
            (function() {a
              const originalConsoleLog = console.log;
              console.log = function(message) {
                window.ReactNativeWebView.postMessage(message);
                originalConsoleLog(message);
              }
            })();
            true;
          `}
        />
      </View>
    </SafeAreaProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});
